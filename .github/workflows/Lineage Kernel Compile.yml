# GitHub Actions workflow to compile a custom Android kernel for Redmi Note 9 Pro (curtana)
# Triggered manually via the GitHub Actions UI

name: Lineage Kernel Compiling

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  build_kernel:
    name: Build Lineage Kernel
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 12

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential binutils ccache curl flex g++-multilib gcc-multilib git git-lfs gnupg gperf imagemagick lib32readline-dev lib32z1-dev libdw-dev libelf-dev liblz4-tool libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush protobuf-compiler python-is-python3 python3-protobuf rsync schedtool squashfs-tools xsltproc zip zlib1g-dev openjdk-11-jdk
          
      - name: Install ncurses5 for Ubuntu 22.04
        run: |
          sudo apt-get update
          sudo apt-get install -y lib32ncurses5-dev libncurses5 libncurses5-dev

      - name: Clone Kernel Source
        run: git clone --depth=1 https://github.com/ImMinhaz-Dev/kernel_xiaomi_sm6250.git -b lineage-22.2 kernel

      - name: Clone AnyKernel3
        run: git clone --depth=1 https://github.com/ImMinhaz-Dev/anykernel3.git -b master anykernel

      - name: Clone Clang Toolchain
        run: git clone --depth=1 https://gitlab.com/PixelOS-Devices/playgroundtc.git clang

      - name: Set up Environment Variables
        run: |
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=MINHAZ" >> $GITHUB_ENV
          echo "KBUILD_BUILD_HOST=POTATO" >> $GITHUB_ENV
          echo "USE_CCACHE=1" >> $GITHUB_ENV
          echo "CCACHE_EXEC=$(which ccache)" >> $GITHUB_ENV
          echo "CCACHE_DIR=${{ github.workspace }}/ccache" >> $GITHUB_ENV
          echo "PATH=${{ github.workspace }}/clang/bin:$PATH" >> $GITHUB_ENV

      - name: Configure ccache
        run: |
          ccache -M 50G
          ccache -o compression=true

      - name: Prepare Kernel Source
        working-directory: ./kernel
        run: |
          make mrproper
          make clean
          mkdir -p out

      - name: Generate Kernel .config
        working-directory: ./kernel
        run: |
          make O=out vendor/xiaomi/miatoll_defconfig

      - name: Compile Kernel
        working-directory: ./kernel
        run: |
          make O=out -j$(nproc --all) \
          CC=clang \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi-

      - name: Customize anykernel.sh
        working-directory: ./anykernel
        run: |
          COMPILER_NAME=$(basename $(echo ${{ github.workspace }}/clang/bin/clang))
          sed -i "s/kernel.compiler=.*/kernel.compiler=$COMPILER_NAME/" anykernel.sh

      - name: Package Flashable Zip
        working-directory: ./anykernel
        run: |
          cp ../kernel/out/arch/arm64/boot/Image.gz .
          cp ../kernel/out/arch/arm64/boot/dtbo.img .
          # The dtb.img is often appended to the kernel Image, but if it's separate, copy it.
          if [ -f ../kernel/out/arch/arm64/boot/dtb.img ]; then
            cp ../kernel/out/arch/arm64/boot/dtb.img .
          fi
          # Find and copy kernel modules if they exist
          find ../kernel/out -name "*.ko" -exec cp {} modules/ \;

      - name: Create Zip file
        working-directory: ./anykernel
        run: zip -r9 ../Lineage-Kernel-curtana.zip *

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Lineage-Kernel-curtana
          path: Lineage-Kernel-curtana.zip
