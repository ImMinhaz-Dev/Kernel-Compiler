# .github/workflows/kernel_build.yml

name: sm6250 LineageOS Kernel Build

on:
  workflow_dispatch: # Allows manual triggering from the GitHub Actions tab
  push:
    branches:
      - main # Trigger on push to your kernel's main development branch

jobs:
  build_kernel:
    runs-on: ubuntu-latest # GitHub-hosted runner, Ubuntu is recommended for Android builds

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: 'ImMinhaz-Dev/android_kernel_xiaomi_sm6250' # Your kernel repository
          ref: 'lineage-22.2' # Your kernel branch
          path: 'kernel_source' # Checkout to a specific directory

      - name: Checkout AnyKernel3
        uses: actions/checkout@v4
        with:
          repository: 'ImMinhaz-Dev/anykernel3' # Your AnyKernel3 repository
          ref: 'master' # Your AnyKernel3 branch
          path: 'AnyKernel3'

      - name: Prepare Build Environment (Ubuntu Packages)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential git zip python3 ccache flex bison bc cpio kmod \
            libncurses6 libelf-dev openssl device-tree-compiler unzip xz-utils

      - name: Download and Extract Zyc Clang
        env:
          ZYC_CLANG_RELEASE_TAG: 22.0.0git-20250726-release # Latest tag from ZyCromerZ/Clang releases
          ZYC_CLANG_FILENAME: Clang-22.0.0git-20250726.tar.gz # Exact filename for the chosen release
        run: |
          mkdir -p "$HOME/toolchains"
          echo "Downloading Zyc Clang from GitHub Releases..."
          curl -L -o "$HOME/toolchains/${{ env.ZYC_CLANG_FILENAME }}" "https://github.com/ZyCromerZ/Clang/releases/download/${{ env.ZYC_CLANG_RELEASE_TAG }}/${{ env.ZYC_CLANG_FILENAME }}"

          echo "Extracting Zyc Clang..."
          tar -xf "$HOME/toolchains/${{ env.ZYC_CLANG_FILENAME }}" -C "$HOME/toolchains"
          
          # Verify Zyc Clang structure
          ls -l "$HOME/toolchains/bin/clang" || { echo "Zyc Clang clang binary not found!"; exit 1; }
          ls -l "$HOME/toolchains/aarch64-linux-gnu/bin/ar" || { echo "Zyc Clang aarch64-linux-gnu ar binary not found!"; exit 1; }
          ls -l "$HOME/toolchains/arm-linux-gnueabi/bin/ar" || { echo "Zyc Clang arm-linux-gnueabi ar binary not found!"; exit 1; }

      - name: Setup Environment Variables for Kernel Compilation
        shell: bash # Explicitly use bash for consistent behavior
        run: |
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=MINHAZ" >> $GITHUB_ENV
          echo "KBUILD_BUILD_HOST=MANJARO-i3" >> $GITHUB_ENV

          # Path to Zyc Clang installation's root directory
          echo "ZYC_CLANG_ROOT=$HOME/toolchains" >> $GITHUB_ENV
          
          # The path to the main Clang binaries
          echo "ZYC_CLANG_BIN=$HOME/toolchains/bin" >> $GITHUB_ENV

          # Set PATH to include Zyc Clang's main bin directory
          echo "PATH=$HOME/toolchains/bin:$PATH" >> $GITHUB_ENV # Prepend Zyc Clang to PATH

          # Explicitly tell the kernel's build system to use Zyc Clang's binaries.
          echo "CC=$HOME/toolchains/bin/clang" >> $GITHUB_ENV
          echo "LD=$HOME/toolchains/bin/ld.lld" >> $GITHUB_ENV
          echo "AR=$HOME/toolchains/bin/llvm-ar" >> $GITHUB_ENV
          echo "NM=$HOME/toolchains/bin/llvm-nm" >> $GITHUB_ENV
          echo "OBJCOPY=$HOME/toolchains/bin/llvm-objcopy" >> $GITHUB_ENV
          echo "OBJDUMP=$HOME/toolchains/bin/llvm-objdump" >> $GITHUB_ENV
          echo "STRIP=$HOME/toolchains/bin/llvm-strip" >> $GITHUB_ENV

          # Target triple for Clang.
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV

          # CROSS_COMPILE for AArch64 (points to binutils directory within Zyc Clang)
          echo "CROSS_COMPILE=$HOME/toolchains/aarch64-linux-gnu/bin/" >> $GITHUB_ENV
          echo "CROSS_COMPILE_ARM32=$HOME/toolchains/arm-linux-gnueabi/bin/" >> $GITHUB_ENV

          # CLANG_GCC_TOOLCHAIN tells Clang where its supporting GNU-like toolchain/sysroot is.
          echo "CLANG_GCC_TOOLCHAIN=$HOME/toolchains/aarch64-linux-gnu" >> $GITHUB_ENV


      - name: Configure and Compile Kernel
        working-directory: ./kernel_source
        run: |
          # Clean the kernel source (important for a fresh build)
          make O=out mrproper

          # Configure the kernel
          make O=out vendor/atoll-perf_defconfig \
            LLVM=1 LLVM_IAS=1 \
            DTC_EXT="$(command -v dtc)" \
            CC="${CC} --gcc-toolchain=${CLANG_GCC_TOOLCHAIN}"

          # Compile the kernel
          make O=out -j$(nproc) \
            LLVM=1 LLVM_IAS=1 \
            DTC_EXT="$(command -v dtc)" \
            CC="${CC} --gcc-toolchain=${CLANG_GCC_TOOLCHAIN}"

      - name: Package with AnyKernel3
        working-directory: ./AnyKernel3
        run: |
          # Define paths relative to AnyKernel3 directory
          KERNEL_DIR="../kernel_source/out/arch/arm64/boot"
          
          # Copy compiled kernel image
          # Common image names: Image, Image.gz, Image.gz-dtb
          # Using Image.gz-dtb as it's common for Qualcomm devices. Verify this path if compilation fails.
          cp "${KERNEL_DIR}/Image.gz" ./
          
          # If your device needs a separate dtbo.img, uncomment and copy it here:
          cp "${KERNEL_DIR}/dtbo.img" ./ 
          cp "${KERNEL_DIR}/dtb.img" ./ 

          # Optional: Adjust AnyKernel3 properties (e.g., kernel string, device names)
          # These lines can be uncommented and modified to customize the flashable zip's behavior/info
          # sed -i 's|kernel.string=.*|kernel.string=MyCustomSM6250Kernel-$(date +%Y%m%d)|g' anykernel.sh
          # sed -i 's|device.name1=.*|device.name1=sm6250|g' anykernel.sh
          # sed -i 's|device.name2=.*|device.name2=Redmi Note 9 Pro|g' anykernel.sh # Example for a specific device

          # Zip the AnyKernel3 package
          zip -r9 "sm6250-kernel-$(date +%Y%m%d-%H%M).zip" . -x .git .github

      - name: Upload Kernel as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sm6250-kernel-zip
          path: AnyKernel3/sm6250-kernel-*.zip # Upload the generated ZIP
          retention-days: 7 # Keep the artifact for 7 days (adjust as needed)
