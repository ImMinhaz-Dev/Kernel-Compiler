name: OSS Kernel compiling

on:
  workflow_dispatch:

jobs:
  build:
    name: ${{ github.event.repository.name }} - ${{ github.ref_name }} - compiler...
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: MiCode/Xiaomi_Kernel_OpenSource.git
          ref: curtana-q-oss
          path: kernel_source

      - name: Checkout Anykernel3
        uses: actions/checkout@v4
        with:
          repository: ImMinhaz-Dev/anykernel3.git
          ref: master
          path: anykernel3

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential git flex bison bc libssl-dev libncurses-dev libelf-dev libudev-dev \
            fakeroot xz-utils gawk python3 dwarves ccache libiberty-dev pkg-config autoconf uuid-dev libjson-c-dev libzstd-dev squashfs-tools

      - name: Download and Setup Toolchain
        run: |
          TOOLCHAIN_DIR="/opt/toolchains/arm-gnu-toolchain"
          mkdir -p "$TOOLCHAIN_DIR"
          curl -L "https://developer.arm.com/-/media/Files/downloads/gnu/14.3.rel1/binrel/arm-gnu-toolchain-14.3.rel1-x86_64-aarch64-none-linux-gnu.tar.xz" | sudo tar -xJ --strip-components=1 -C "$TOOLCHAIN_DIR"
          echo "$TOOLCHAIN_DIR/bin" >> $GITHUB_PATH
          export PATH="$TOOLCHAIN_DIR/bin:$PATH" # Set PATH for current step as well

      - name: Verify Toolchain
        run: |
          export PATH="/opt/toolchains/arm-gnu-toolchain/bin:$PATH"
          aarch64-none-linux-gnu-gcc --version
          aarch64-none-linux-gnu-ld --version

      - name: Configure CCACHE
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.sha }}
          max-size: 2G

      - name: Clean Kernel Source
        run: |
          cd kernel_source
          make mrproper
          make clean

      - name: Create Output Directory
        run: mkdir kernel_source/out

      - name: Configure Kernel
        run: |
          cd kernel_source
          make O=out ARCH=arm64 SUBARCH=arm64 vendor/atoll-perf_defconfig

      - name: Compile Kernel
        run: |
          cd kernel_source
          export KBUILD_BUILD_USER="MINHAZ"
          export KBUILD_BUILD_HOST="POTATO"
          export USE_CCACHE=1
          export CCACHE_EXEC=$(which ccache)
          export CC="ccache aarch64-none-linux-gnu-gcc"
          make -j$(nproc) O=out ARCH=arm64 SUBARCH=arm64

      - name: Customize Anykernel3
        run: |
          cd anykernel3
          sed -i 's/kernel.string=.*/kernel.string=OSS Kernel/' anykernel.sh
          sed -i 's/kernel.compiler=.*/kernel.compiler=aarch64-none-linux-gnu-gcc (GCC) 14.3.0/' anykernel.sh # Adjust compiler version if different

      - name: Package Kernel
        run: |
          cp kernel_source/out/arch/arm64/boot/Image.gz anykernel3/
          cp kernel_source/out/arch/arm64/boot/dtbo.img anykernel3/
          cp kernel_source/out/arch/arm64/boot/dtb.img anykernel3/
          find kernel_source/out/modules -name "*.ko" -exec cp {} anykernel3/modules/system/lib/modules/ \; || true # Copy modules if they exist
          cd anykernel3
          zip -r9 "OSS-Kernel-Curtana-${{ github.run_id }}.zip" * -x .git

      - name: Upload Flashable Zip
        uses: actions/upload-artifact@v4
        with:
          name: OSS-Kernel-Curtana
          path: anykernel3/OSS-Kernel-Curtana-*.zip
