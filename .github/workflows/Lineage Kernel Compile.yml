# .github/workflows/kernel_build.yml

name: sm6250 LineageOS Kernel Build

on:
  workflow_dispatch: # Allows manual triggering from the GitHub Actions tab
  push:
    branches:
      - main # Trigger on push to your kernel's main development branch

jobs:
  build_kernel:
    runs-on: ubuntu-latest # GitHub-hosted runner, Ubuntu is recommended for Android builds

    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: 'ImMinhaz-Dev/android_kernel_xiaomi_sm6250' # Your kernel repository
          ref: 'lineage-22.2' # Your kernel branch
          path: 'kernel_source' # Checkout to a specific directory

      - name: Checkout AnyKernel3
        uses: actions/checkout@v4
        with:
          repository: 'ImMinhaz-Dev/anykernel3' # Your AnyKernel3 repository
          ref: 'master' # Your AnyKernel3 branch
          path: 'AnyKernel3'

      - name: Prepare Build Environment (Ubuntu Packages)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential git python3 ccache flex bison bc cpio kmod \
            ncurses libelf-dev openssl device-tree-compiler zip unzip xz-utils

      - name: Download and Extract Zyc Clang
        env:
          ZYC_CLANG_RELEASE_TAG: 22.0.0git-20250726-release # Latest tag from ZyCromerZ/Clang releases
          ZYC_CLANG_FILENAME: Clang-22.0.0git-20250726.tar.gz # Exact filename for the chosen release
        run: |
          mkdir -p "$HOME/toolchains"
          echo "Downloading Zyc Clang from GitHub Releases..."
          curl -L -o "$HOME/toolchains/${{ env.ZYC_CLANG_FILENAME }}" "https://github.com/ZyCromerZ/Clang/releases/download/${{ env.ZYC_CLANG_RELEASE_TAG }}/${{ env.ZYC_CLANG_FILENAME }}"

          echo "Extracting Zyc Clang directly into toolchains directory..."
          tar -xf "$HOME/toolchains/${{ env.ZYC_CLANG_FILENAME }}" -C "$HOME/toolchains"
          
          # Verify Zyc Clang structure
          ls -l "$HOME/toolchains/bin/clang" || { echo "Zyc Clang clang binary not found!"; exit 1; }
          
          # Check for both llvm-ar and aarch64-linux-gnu-ar in the main bin directory
          if [ -f "$HOME/toolchains/bin/llvm-ar" ]; then
            echo "Found $HOME/toolchains/bin/llvm-ar"
          else
            echo "llvm-ar not found, trying aarch64-linux-gnu-ar..."
            if [ -f "$HOME/toolchains/bin/aarch64-linux-gnu-ar" ]; then
              echo "Found $HOME/toolchains/bin/aarch64-linux-gnu-ar"
            else
              echo "Neither llvm-ar nor aarch64-linux-gnu-ar found in $HOME/toolchains/bin/! Check toolchain contents."
              exit 1
            fi
          fi


      - name: Setup Environment Variables for Kernel Compilation
        shell: bash # Explicitly use bash for consistent behavior
        run: |
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=GitHubActions" >> $GITHUB_ENV
          echo "KBUILD_BUILD_HOST=github-runner" >> $GITHUB_ENV

          # Path to Zyc Clang installation's root directory.
          echo "ZYC_CLANG_ROOT=$HOME/toolchains" >> $GITHUB_ENV
          
          # Set PATH to include Zyc Clang's main bin directory (for commands like clang --version)
          echo "PATH=$HOME/toolchains/bin:$PATH" >> $GITHUB_ENV # Prepend Zyc Clang to PATH

          # Target triple for Clang. This tells Clang what architecture to target.
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV


      - name: Configure and Compile Kernel
        working-directory: ./kernel_source
        run: |
          # Define common LLVM tool paths for reusability in make commands
          CLANG_BIN="${{ env.ZYC_CLANG_ROOT }}/bin"
          
          # Determine the correct 'ar' binary to use
          # This logic will use llvm-ar if found, otherwise fall back to aarch64-linux-gnu-ar
          KERNEL_AR="${CLANG_BIN}/llvm-ar" # Default to llvm-ar
          if [ ! -f "${KERNEL_AR}" ]; then
            if [ -f "${CLANG_BIN}/aarch64-linux-gnu-ar" ]; then
              KERNEL_AR="${CLANG_BIN}/aarch64-linux-gnu-ar"
              echo "Using aarch64-linux-gnu-ar as AR tool."
            else
              echo "Error: Neither llvm-ar nor aarch64-linux-gnu-ar found. Build cannot proceed."
              exit 1
            fi
          else
            echo "Using llvm-ar as AR tool."
          fi

          # --- Start Enhanced Cleaning ---
          echo "Performing deep clean of kernel source and output directory..."
          # Ensure we are in the kernel_source directory before running mrproper
          # rm -rf out is crucial to clear previous build artifacts
          rm -rf out
          make mrproper
          # --- End Enhanced Cleaning ---


          # --- FIX FOR STACK PROTECTOR ERROR ---
          # Disable CONFIG_CC_STACKPROTECTOR_STRONG due to compiler compatibility check
          scripts/config --disable CONFIG_CC_STACKPROTECTOR_STRONG
          # --- END FIX ---

          # Configure the kernel
          make O=out vendor/atoll-perf_defconfig \
            LLVM=1 LLVM_IAS=1 \
            DTC_EXT="$(command -v dtc)" \
            CC="${CLANG_BIN}/clang" \
            LD="${CLANG_BIN}/ld.lld" \
            AR="${KERNEL_AR}" \
            NM="${CLANG_BIN}/llvm-nm" \
            OBJCOPY="${CLANG_BIN}/llvm-objcopy" \
            OBJDUMP="${CLANG_BIN}/llvm-objdump" \
            STRIP="${CLANG_BIN}/llvm-strip"

          # Compile the kernel
          make O=out -j$(nproc) \
            LLVM=1 LLVM_IAS=1 \
            DTC_EXT="$(command -v dtc)" \
            CC="${CLANG_BIN}/clang" \
            LD="${CLANG_BIN}/ld.lld" \
            AR="${KERNEL_AR}" \
            NM="${CLANG_BIN}/llvm-nm" \
            OBJCOPY="${CLANG_BIN}/llvm-objcopy" \
            OBJDUMP="${CLANG_BIN}/llvm-objdump" \
            STRIP="${CLANG_BIN}/llvm-strip"

      - name: Package with AnyKernel3
        working-directory: ./AnyKernel3
        run: |
          # Define paths relative to AnyKernel3 directory
          KERNEL_DIR="../kernel_source/out/arch/arm64/boot"
          
          # Copy compiled kernel image
          cp "${KERNEL_DIR}/Image.gz" ./
          
          # If your device needs a separate dtbo.img, uncomment and copy it here:
          cp "${KERNEL_DIR}/dtbo.img" ./ 

          # Optional: Adjust AnyKernel3 properties (e.g., kernel string, device names)
          # sed -i 's|kernel.string=.*|kernel.string=MyCustomSM6250Kernel-$(date +%Y%m%d)|g' anykernel.sh
          # sed -i 's|device.name1=.*|device.name1=sm6250|g' anykernel.sh
          # sed -i 's|device.name2=.*|device.name2=Redmi Note 9 Pro|g' anykernel.sh # Example for a specific device

          # Zip the AnyKernel3 package
          zip -r9 "sm6250-kernel-$(date +%Y%m%d-%H%M).zip" . -x .git .github

      - name: Upload Kernel as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sm6250-kernel-zip
          path: AnyKernel3/sm6250-kernel-*.zip # Upload the generated ZIP
          retention-days: 7 # Keep the artifact for 7 days (adjust as needed)
