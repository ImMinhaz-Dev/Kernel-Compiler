# GitHub Actions workflow for compiling a LineageOS kernel
# Trigger this workflow manually from the Actions tab in your GitHub repository.

name: Lineage Kernel Compiling

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build_kernel:
    name: Build Kernel for Redmi Note 9 Pro (curtana)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc build-essential zip curl libstdc++6 git wget python3 libssl-dev libncurses5-dev ccache gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu imagemagick

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}
          max-size: 5G

      - name: Set up Toolchain (Android NDK)
        run: |
          echo "Setting up Android NDK toolchain..."
          mkdir -p $HOME/toolchain
          curl -sL "https://dl.google.com/android/repository/android-ndk-r28c-linux.zip" -o ndk.zip
          unzip -q ndk.zip -d $HOME/toolchain
          rm ndk.zip
          # Add toolchain to the environment for future steps
          echo "TOOLCHAIN_PATH=$HOME/toolchain/android-ndk-r28c/toolchains/llvm/prebuilt/linux-x86_64" >> $GITHUB_ENV
          echo "$HOME/toolchain/android-ndk-r28c/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
          echo "Toolchain setup complete."
          which clang

      - name: Clone Kernel Source
        run: |
          echo "Cloning kernel source..."
          git clone --depth=1 https://github.com/ImMinhaz-Dev/android_kernel_xiaomi_sm6250.git -b lineage-22.2 kernel

      - name: Clean up build directory
        run: |
          cd kernel
          echo "Cleaning up previous build artifacts..."
          make mrproper
          make clean
          rm -rf out

      - name: Generate Kernel Config
        run: |
          cd kernel
          echo "Generating .config file..."
          make O=out ARCH=arm64 \
            CC=clang \
            LD=ld.lld \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            vendor/xiaomi/miatoll_defconfig

      - name: Compile Kernel
        run: |
          cd kernel
          echo "Starting kernel compilation..."
          export KBUILD_BUILD_USER="MINHAZ"
          export KBUILD_BUILD_HOST="MANJARO-i3WM"
          export USE_CCACHE=1
          export CCACHE_EXEC=$(which ccache)
          
          # Explicitly point to the NDK's clang to avoid ambiguity
          make -j$(nproc --all) O=out ARCH=arm64 \
            CC="ccache clang" \
            LD="ld.lld" \
            AR="${TOOLCHAIN_PATH}/bin/llvm-ar" \
            NM="${TOOLCHAIN_PATH}/bin/llvm-nm" \
            OBJCOPY="${TOOLCHAIN_PATH}/bin/llvm-objcopy" \
            OBJDUMP="${TOOLCHAIN_PATH}/bin/llvm-objdump" \
            STRIP="${TOOLCHAIN_PATH}/bin/llvm-strip" \
            CLANG_TRIPLE="aarch64-linux-gnu-" \
            CROSS_COMPILE="aarch64-linux-gnu-" \
            LLVM=1 \
            LLVM_IAS=1

      - name: Clone AnyKernel3
        run: |
          echo "Cloning AnyKernel3..."
          git clone --depth=1 https://github.com/ImMinhaz-Dev/anykernel3.git -b master anykernel

      - name: Customize anykernel.sh
        run: |
          echo "Customizing anykernel.sh..."
          sed -i 's/kernel.compiler=.*$/kernel.compiler=NDK Clang (r28c)/' anykernel/anykernel.sh

      - name: Package Flashable Zip
        run: |
          echo "Packaging flashable zip..."
          # Copy kernel images to AnyKernel3 directory
          cp kernel/out/arch/arm64/boot/Image.gz anykernel/
          cp kernel/out/arch/arm64/boot/dtb.img anykernel/
          cp kernel/out/arch/arm64/boot/dtbo.img anykernel/
          
          # Find and copy kernel modules if they exist
          find kernel/out -name "*.ko" -exec cp {} anykernel/modules/system/lib/modules/ \;

          # Zip the AnyKernel3 directory
          cd anykernel
          zip -r9 Flashable-Kernel-$(date +%Y%m%d-%H%M).zip * -x ".git*" "README.md"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Flashable-Kernel-Zip
          path: anykernel/Flashable-Kernel-*.zip
