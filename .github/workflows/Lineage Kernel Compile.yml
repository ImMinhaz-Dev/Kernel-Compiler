#
# GitHub Actions workflow for compiling a custom LineageOS kernel.
#
# This workflow automates the following steps:
# 1. Sets up an Ubuntu environment with all necessary dependencies.
# 2. Clones the specified kernel source and AnyKernel3 repositories.
# 3. Configures the build environment with user-defined parameters.
# 4. Compiles the kernel using ccache for faster subsequent builds.
# 5. Packages the compiled kernel, DTB, DTBO, and modules into a flashable zip.
# 6. Uploads the final flashable zip as a workflow artifact.
#

name: Lineage Kernel Compiling

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Build LineageOS Kernel for Redmi Note 9 Pro (curtana)

    steps:
      # Step 1: Set up the build environment and install dependencies
      - name: Install Build Dependencies
        run: |
          # Update package lists
          sudo apt-get update
          # Install essential packages for kernel compilation
          sudo apt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git git-lfs gnupg gperf imagemagick lib32readline-dev lib32z1-dev libdw-dev libelf-dev liblz4-tool libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush protobuf-compiler python3-protobuf rsync schedtool squashfs-tools xsltproc zip zlib1g-dev openjdk-11-jdk
          # The python-is-python3 package might not be available on newer distros, create a symlink instead
          sudo ln -sf /usr/bin/python3 /usr/bin/python
          # Install specific ncurses5 libraries required for older build systems on newer Ubuntu
          echo "Installing ncurses5 compatibility libraries..."
          wget https://archive.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2_amd64.deb
          sudo dpkg -i libtinfo5_6.3-2_amd64.deb
          rm -f libtinfo5_6.3-2_amd64.deb
          wget https://archive.ubuntu.com/ubuntu/pool/universe/n/ncurses/libncurses5_6.3-2_amd64.deb
          sudo dpkg -i libncurses5_6.3-2_amd64.deb
          rm -f libncurses5_6.3-2_amd64.deb
          echo "Dependencies installed successfully."

      # Step 2: Clone the kernel source code
      - name: Clone Kernel Source
        uses: actions/checkout@v4
        with:
          path: kernel_xiaomi_sm6250
          repository: ImMinhaz-Dev/kernel_xiaomi_sm6250
          ref: lineage-22.2

      # Step 3: Clone AnyKernel3 repository
      - name: Clone AnyKernel3
        uses: actions/checkout@v4
        with:
          path: anykernel3
          repository: ImMinhaz-Dev/anykernel3
          ref: master

      # Step 4: Set up ccache for faster builds
      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ runner.os }}
          # Path to the ccache directory
          path: ~/.ccache

      # Step 5: Compile the kernel
      - name: Compile Kernel
        run: |
          # Set environment variables for the build
          export ARCH=arm64
          export SUBARCH=arm64
          export KBUILD_BUILD_USER="MINHAZ"
          export KBUILD_BUILD_HOST="POTATO"
          export USE_CCACHE=1
          export CCACHE_EXEC=$(which ccache)
          
          # Navigate to the kernel source directory
          cd kernel_xiaomi_sm6250

          # Clean the source tree
          echo "Cleaning kernel source..."
          make mrproper
          make clean
          
          # Create the output directory
          mkdir -p out
          
          # Generate the kernel config
          echo "Generating .config for miatoll..."
          make O=out vendor/xiaomi/miatoll_defconfig
          
          # Start the compilation
          echo "Starting kernel compilation..."
          make O=out -j$(nproc --all)
          
          echo "Kernel compilation finished."

      # Step 6: Package the kernel with AnyKernel3
      - name: Package with AnyKernel3
        run: |
          # Navigate to the AnyKernel3 directory
          cd anykernel3
          
          # Get the compiler version string
          COMPILER_STRING=$(cd ../kernel_xiaomi_sm6250/out/include/generated/compile.h && awk -F'"' '/UTS_VERSION/ {print $2}')
          
          # Customize anykernel.sh with the compiler info
          sed -i "s/kernel.compiler=.*/kernel.compiler=$COMPILER_STRING/" anykernel.sh
          
          # Copy compiled kernel files to AnyKernel3 directory
          echo "Copying compiled files to AnyKernel3..."
          cp ../kernel_xiaomi_sm6250/out/arch/arm64/boot/Image.gz ./
          cp ../kernel_xiaomi_sm6250/out/arch/arm64/boot/dtbo.img ./
          cp ../kernel_xiaomi_sm6250/out/arch/arm64/boot/dtb.img ./
          
          # Find and copy kernel modules
          MODULE_DIR=modules/system/lib/modules
          mkdir -p $MODULE_DIR
          find ../kernel_xiaomi_sm6250/out -name "*.ko" -exec cp {} $MODULE_DIR/ \;
          
          # Create the flashable zip
          echo "Creating flashable zip..."
          zip -r9 Flashable-Kernel-Miatoll.zip * -x .git README.md
          
          echo "Packaging complete."

      # Step 7: Upload the flashable zip as an artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Miatoll-Flashable-Kernel
          path: anykernel3/Flashable-Kernel-Miatoll.zip
