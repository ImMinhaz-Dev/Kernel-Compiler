#
# Copyright (C) 2024 The Potato Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Lineage Kernel Compiling

# This workflow can be triggered manually from the Actions tab on GitHub.
on:
  workflow_dispatch:
    inputs:
      build_name:
        description: 'Name for the build run'
        required: true
        default: 'compiler...'

jobs:
  build_kernel:
    name: Build Kernel for curtana
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          # This step installs all the necessary packages for the build process.
          sudo apt-get update
          sudo apt-get install -y \
            bc bison build-essential binutils ccache curl flex g++-multilib \
            gcc-multilib git git-lfs gnupg gperf imagemagick \
            lib32ncurses5-dev libncurses5 libncurses5-dev lib32readline-dev \
            lib32z1-dev libdw-dev libelf-dev lz4 libsdl1.2-dev libssl-dev \
            libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools \
            xsltproc zip zlib1g-dev openjdk-11-jdk protobuf-compiler \
            python-is-python3 python3-protobuf

      - name: Set up environment variables and ccache
        run: |
          # Set up environment variables that will be used across different steps.
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=MINHAZ" >> $GITHUB_ENV
          echo "KBUILD_BUILD_HOST=POTATO" >> $GITHUB_ENV
          echo "USE_CCACHE=1" >> $GITHUB_ENV
          echo "CCACHE_EXEC=$(which ccache)" >> $GITHUB_ENV
          
          # Configure ccache for better performance
          ccache -M 5G
          ccache -o compression=true

      - name: Clone kernel source
        run: |
          # Clones the specified kernel source repository and branch.
          git clone --depth=1 https://github.com/ImMinhaz-Dev/kernel_xiaomi_sm6250.git -b lineage-22.2 kernel
          cd kernel

      - name: Clean kernel source
        run: |
          # Navigates into the kernel source directory and cleans it.
          # This ensures a fresh build environment.
          cd kernel
          make mrproper
          make clean

      - name: Generate kernel config
        run: |
          # Generates the .config file for the miatoll device.
          # The 'O=out' parameter specifies the output directory for build artifacts.
          cd kernel
          make O=out vendor/xiaomi/miatoll_defconfig

      - name: Compile the kernel
        run: |
          # This is the main compilation step.
          # It uses the number of available CPU cores to speed up the build.
          cd kernel
          make O=out -j$(nproc --all)

      - name: Clone AnyKernel3
        run: |
          # Clones the AnyKernel3 repository which is used to create a flashable zip.
          git clone --depth=1 https://github.com/ImMinhaz-Dev/anykernel3.git -b master anykernel

      - name: Package the kernel into a flashable zip
        run: |
          # This step prepares the final flashable zip file.
          cd anykernel

          # Customize the anykernel.sh script with the compiler info
          sed -i 's/kernel.compiler=.*/kernel.compiler="GCC (aarch64-linux-gnu) Compiler"/' anykernel.sh

          # Copy the compiled kernel images to the AnyKernel3 directory
          cp ../kernel/out/arch/arm64/boot/Image.gz .
          cp ../kernel/out/arch/arm64/boot/dtb.img .
          cp ../kernel/out/arch/arm64/boot/dts/vendor/qcom/sm6250-common.dtbo dtbo.img

          # Find and copy any compiled kernel modules (*.ko files)
          find ../kernel/out -type f -name "*.ko" -exec cp {} modules/system/lib/modules/ \;
          
          # Create the final zip file
          zip -r9 LineageKernel-curtana-${{ github.run_id }}.zip * -x .git README.md

      - name: Upload flashable zip as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: LineageKernel-curtana
          path: anykernel/LineageKernel-curtana-${{ github.run_id }}.zip

